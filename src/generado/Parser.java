
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package generado;

import java_cup.runtime.*;
import generado.Lexer;
import manual.Variable;
import java.util.ArrayList;
import java.lang.reflect.Array;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import manual.ErrorCheck;
import manual.TypeConvert;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\015\004\000\002\002\004\000\002\015" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\004\000\002\005\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\007\003\000\002" +
    "\007\003\000\002\011\005\000\002\011\006\000\002\036" +
    "\003\000\002\036\003\000\002\002\005\000\002\002\006" +
    "\000\002\012\007\000\002\012\011\000\002\013\006\000" +
    "\002\010\006\000\002\010\004\000\002\025\005\000\002" +
    "\025\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\016\006\000\002\003\003" +
    "\000\002\032\005\000\002\032\005\000\002\032\003\000" +
    "\002\033\005\000\002\033\005\000\002\033\003\000\002" +
    "\034\004\000\002\034\004\000\002\034\003\000\002\034" +
    "\003\000\002\034\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\004\000\002\034\004\000\002" +
    "\034\003\000\002\035\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\027\004\000\002\027\005\000\002\027\003\000\002" +
    "\027\004\000\002\027\005\000\002\027\006\000\002\030" +
    "\003\000\002\030\004\000\002\030\004\000\002\030\005" +
    "\000\002\031\004\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\044\003\026\004\010\005\035\007\015\010" +
    "\040\011\033\012\016\013\020\014\011\025\022\026\013" +
    "\041\012\047\025\050\036\051\031\052\014\053\007\001" +
    "\002\000\004\047\166\001\002\000\100\003\uffdf\004\uffdf" +
    "\005\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\020\uffdf\021\uffdf\023\uffdf\025\uffdf\026\uffdf" +
    "\027\067\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\040\066\041\uffdf\042\uffdf\044\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\001\002\000\054\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\016\ufffd\017\ufffd\025\ufffd\026" +
    "\ufffd\041\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\001\002\000\100\003\uffd8\004\uffd8\005\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\020\uffd8" +
    "\021\uffd8\023\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\044\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\001\002\000\004\047\uffe7\001\002\000\024\007\015" +
    "\025\022\026\013\041\012\047\056\050\036\051\031\052" +
    "\014\053\007\001\002\000\024\007\015\025\022\026\013" +
    "\041\012\047\056\050\036\051\031\052\014\053\007\001" +
    "\002\000\014\025\144\026\152\041\uffbe\050\uffbe\051\uffbe" +
    "\001\002\000\100\003\uffce\004\uffce\005\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\020\uffce" +
    "\021\uffce\023\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\040\uffce\041\uffce" +
    "\042\uffce\044\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053" +
    "\uffce\001\002\000\024\007\015\025\022\026\013\041\012" +
    "\047\056\050\036\051\031\052\014\053\007\001\002\000" +
    "\004\047\uffe4\001\002\000\014\025\141\026\143\041\012" +
    "\050\142\051\140\001\002\000\024\007\015\025\022\026" +
    "\013\041\012\047\056\050\036\051\031\052\014\053\007" +
    "\001\002\000\004\023\133\001\002\000\014\025\uffc2\026" +
    "\uffc2\041\uffc2\050\uffc2\051\uffc2\001\002\000\054\002\ufff5" +
    "\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5\017\ufff5\025\ufff5" +
    "\026\ufff5\041\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053" +
    "\ufff5\001\002\000\054\003\ufff1\004\ufff1\005\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\020" +
    "\127\021\130\023\ufff1\025\ufff1\026\ufff1\041\ufff1\047\ufff1" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\001\002\000\034\023" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\123\040\uffd1\043\057\001" +
    "\002\000\004\023\121\001\002\000\004\023\120\001\002" +
    "\000\004\023\117\001\002\000\100\003\uffd3\004\uffd3\005" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\020\uffd3\021\uffd3\023\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\044\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\001\002\000\010\041\012\050\116" +
    "\051\115\001\002\000\012\004\010\005\035\010\040\012" +
    "\016\001\002\000\054\002\ufff6\003\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\016\ufff6\017\ufff6\025\ufff6\026\ufff6\041\ufff6\047\ufff6" +
    "\050\ufff6\051\ufff6\052\ufff6\053\ufff6\001\002\000\004\047" +
    "\uffe6\001\002\000\100\003\uffd9\004\uffd9\005\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\020" +
    "\uffd9\021\uffd9\023\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\044\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\001\002\000\054\002\uffff\003\uffff\004\uffff\005" +
    "\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff" +
    "\014\uffff\016\uffff\017\uffff\025\uffff\026\uffff\041\uffff\047" +
    "\uffff\050\uffff\051\uffff\052\uffff\053\uffff\001\002\000\004" +
    "\047\uffe5\001\002\000\004\023\110\001\002\000\054\002" +
    "\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\012\ufffc\013\ufffc\014\ufffc\016\ufffc\017\ufffc\025" +
    "\ufffc\026\ufffc\041\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc" +
    "\053\ufffc\001\002\000\054\002\ufffe\003\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\014\ufffe\016\ufffe\017\ufffe\025\ufffe\026\ufffe\041\ufffe\047" +
    "\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\001\002\000\100" +
    "\003\uffdc\004\uffdc\005\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\020\uffdc\021\uffdc\023\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\040\uffdc\041\uffdc\042\uffdc\044\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\001\002\000" +
    "\016\030\077\031\100\032\074\033\076\034\073\035\075" +
    "\001\002\000\064\003\ufff2\004\ufff2\005\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\023\ufff2" +
    "\025\053\026\054\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\041\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\001\002\000\046\002\051\003\026\004\010\005" +
    "\035\007\015\010\040\011\033\012\016\013\020\014\011" +
    "\025\022\026\013\041\012\047\025\050\036\051\031\052" +
    "\014\053\007\001\002\000\100\003\uffd2\004\uffd2\005\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\020\uffd2\021\uffd2\023\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\044\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\001\002\000\004\002\000\001\002\000" +
    "\054\002\001\003\001\004\001\005\001\006\001\007\001" +
    "\010\001\011\001\012\001\013\001\014\001\016\001\017" +
    "\001\025\001\026\001\041\001\047\001\050\001\051\001" +
    "\052\001\053\001\001\002\000\024\007\015\025\022\026" +
    "\013\041\012\047\056\050\036\051\031\052\014\053\007" +
    "\001\002\000\024\007\015\025\022\026\013\041\012\047" +
    "\056\050\036\051\031\052\014\053\007\001\002\000\100" +
    "\003\uffe0\004\uffe0\005\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\020\uffe0\021\uffe0\023\uffe0" +
    "\025\uffe0\026\uffe0\027\067\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\040\066\041\uffe0\042\uffe0\044\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\001\002\000" +
    "\102\003\uffd1\004\uffd1\005\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\020\uffd1\021\uffd1\023" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\057\044\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\001\002\000\024\007\015\025\022\026\013\041\012\047" +
    "\056\050\036\051\031\052\014\053\007\001\002\000\102" +
    "\003\uffd0\004\uffd0\005\uffd0\007\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\020\uffd0\021\uffd0\023\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\040\uffd0\041\uffd0\042\uffd0\043\061" +
    "\044\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\001" +
    "\002\000\024\007\015\025\022\026\013\041\012\047\056" +
    "\050\036\051\031\052\014\053\007\001\002\000\010\025" +
    "\053\026\054\044\063\001\002\000\104\003\uffef\004\uffef" +
    "\005\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\020\uffef\021\uffef\023\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\001\002\000" +
    "\010\025\053\026\054\044\065\001\002\000\104\003\ufff0" +
    "\004\ufff0\005\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\020\ufff0\021\ufff0\023\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\001" +
    "\002\000\024\007\015\025\022\026\013\041\012\047\056" +
    "\050\036\051\031\052\014\053\007\001\002\000\024\007" +
    "\015\025\022\026\013\041\012\047\056\050\036\051\031" +
    "\052\014\053\007\001\002\000\100\003\uffde\004\uffde\005" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\020\uffde\021\uffde\023\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\040\uffde\041\uffde\042\uffde\044\uffde\047\uffde\050\uffde\051" +
    "\uffde\052\uffde\053\uffde\001\002\000\100\003\uffdd\004\uffdd" +
    "\005\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\020\uffdd\021\uffdd\023\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\044\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\001\002\000\100\003\uffe1\004" +
    "\uffe1\005\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\020\uffe1\021\uffe1\023\uffe1\025\uffe1\026" +
    "\uffe1\027\067\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\040\066\041\uffe1\042\uffe1\044\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\001\002\000\024\007\015" +
    "\025\022\026\013\041\012\047\056\050\036\051\031\052" +
    "\014\053\007\001\002\000\024\007\015\025\022\026\013" +
    "\041\012\047\056\050\036\051\031\052\014\053\007\001" +
    "\002\000\024\007\015\025\022\026\013\041\012\047\056" +
    "\050\036\051\031\052\014\053\007\001\002\000\024\007" +
    "\015\025\022\026\013\041\012\047\056\050\036\051\031" +
    "\052\014\053\007\001\002\000\024\007\015\025\022\026" +
    "\013\041\012\047\056\050\036\051\031\052\014\053\007" +
    "\001\002\000\024\007\015\025\022\026\013\041\012\047" +
    "\056\050\036\051\031\052\014\053\007\001\002\000\100" +
    "\003\uffcb\004\uffcb\005\uffcb\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\020\uffcb\021\uffcb\023\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\040\uffcb\041\uffcb\042\uffcb\044\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\001\002\000" +
    "\100\003\uffe2\004\uffe2\005\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\020\uffe2\021\uffe2\023" +
    "\uffe2\025\053\026\054\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\040\uffe2\041\uffe2\042\uffe2\044" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\001\002" +
    "\000\100\003\uffcc\004\uffcc\005\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\020\uffcc\021\uffcc" +
    "\023\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\044\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\001" +
    "\002\000\100\003\uffc9\004\uffc9\005\uffc9\007\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\020\uffc9\021" +
    "\uffc9\023\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\044\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\001\002\000\100\003\uffc7\004\uffc7\005\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\020\uffc7" +
    "\021\uffc7\023\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\040\uffc7\041\uffc7" +
    "\042\uffc7\044\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\001\002\000\100\003\uffca\004\uffca\005\uffca\007\uffca" +
    "\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\020" +
    "\uffca\021\uffca\023\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\040\uffca\041" +
    "\uffca\042\uffca\044\uffca\047\uffca\050\uffca\051\uffca\052\uffca" +
    "\053\uffca\001\002\000\100\003\uffc8\004\uffc8\005\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\020\uffc8\021\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\044\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\001\002\000\054\002\ufff9\003\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\016\ufff9\017\ufff9\025\ufff9\026\ufff9\041\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\001\002\000" +
    "\004\047\112\001\002\000\004\043\057\001\002\000\006" +
    "\023\uffe3\043\061\001\002\000\100\003\uffd4\004\uffd4\005" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\020\uffd4\021\uffd4\023\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\044\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\001\002\000\100\003\uffd6\004\uffd6" +
    "\005\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\020\uffd6\021\uffd6\023\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\044\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\001\002\000\100\003\uffda\004" +
    "\uffda\005\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\020\uffda\021\uffda\023\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\040\uffda\041\uffda\042\uffda\044\uffda\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\001\002\000\054\002\ufff8" +
    "\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8\025\ufff8" +
    "\026\ufff8\041\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\001\002\000\054\002\ufffa\003\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\016\ufffa\017\ufffa\025\ufffa\026\ufffa\041\ufffa\047\ufffa" +
    "\050\ufffa\051\ufffa\052\ufffa\053\ufffa\001\002\000\054\002" +
    "\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\017\ufff7\025" +
    "\ufff7\026\ufff7\041\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\001\002\000\034\023\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\125\040\uffd0\043\061\001\002\000\024\007\015\025" +
    "\022\026\013\041\012\047\056\050\036\051\031\052\014" +
    "\053\007\001\002\000\004\023\ufff4\001\002\000\024\007" +
    "\015\025\022\026\013\041\012\047\056\050\036\051\031" +
    "\052\014\053\007\001\002\000\004\023\ufff3\001\002\000" +
    "\024\007\015\025\022\026\013\041\012\047\056\050\036" +
    "\051\031\052\014\053\007\001\002\000\024\007\015\025" +
    "\022\026\013\041\012\047\056\050\036\051\031\052\014" +
    "\053\007\001\002\000\100\003\uffc6\004\uffc6\005\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6" +
    "\020\uffc6\021\uffc6\023\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\044\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\001\002\000\100\003\uffc5\004\uffc5\005\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\020\uffc5\021\uffc5\023\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\044\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\001\002\000\054\002\ufffb\003\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\016\ufffb\017\ufffb\025\ufffb\026\ufffb\041" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\001\002" +
    "\000\044\003\026\004\010\005\035\007\015\010\040\011" +
    "\033\012\016\013\020\014\011\025\022\026\013\041\012" +
    "\047\025\050\036\051\031\052\014\053\007\001\002\000" +
    "\046\003\026\004\010\005\035\006\136\007\015\010\040" +
    "\011\033\012\016\013\020\014\011\025\022\026\013\041" +
    "\012\047\025\050\036\051\031\052\014\053\007\001\002" +
    "\000\054\002\uffec\003\uffec\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\016\uffec" +
    "\017\uffec\025\uffec\026\uffec\041\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\001\002\000\100\003\uffd5\004\uffd5" +
    "\005\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\020\uffd5\021\uffd5\023\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\001\002\000\100\003\uffd7\004" +
    "\uffd7\005\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\020\uffd7\021\uffd7\023\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\040\uffd7\041\uffd7\042\uffd7\044\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002\000\014\025\uffc1" +
    "\026\uffc1\041\uffc1\050\uffc1\051\uffc1\001\002\000\100\003" +
    "\uffdb\004\uffdb\005\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\020\uffdb\021\uffdb\023\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\040\uffdb\041\uffdb\042\uffdb\044\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\001\002\000\014" +
    "\025\144\026\145\041\uffbc\050\uffbc\051\uffbc\001\002\000" +
    "\014\025\uffb9\026\uffb9\041\uffb9\050\uffb9\051\uffb9\001\002" +
    "\000\014\025\uffc3\026\uffc3\041\uffc3\050\uffc3\051\uffc3\001" +
    "\002\000\014\025\147\026\150\041\uffbb\050\uffbb\051\uffbb" +
    "\001\002\000\014\025\uffba\026\uffba\041\uffba\050\uffba\051" +
    "\uffba\001\002\000\014\025\uffbf\026\uffbf\041\uffbf\050\uffbf" +
    "\051\uffbf\001\002\000\100\003\uffcf\004\uffcf\005\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\020\127\021\130\023\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\044\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\001\002\000\014\025\uffc4\026\uffc4\041\uffc4" +
    "\050\uffc4\051\uffc4\001\002\000\014\025\147\026\154\041" +
    "\uffbd\050\uffbd\051\uffbd\001\002\000\014\025\uffc0\026\uffc0" +
    "\041\uffc0\050\uffc0\051\uffc0\001\002\000\010\025\053\026" +
    "\054\042\156\001\002\000\100\003\uffcd\004\uffcd\005\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\020\uffcd\021\uffcd\023\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\044\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\001\002\000\004\015\160\001\002\000" +
    "\044\003\026\004\010\005\035\007\015\010\040\011\033" +
    "\012\016\013\020\014\011\025\022\026\013\041\012\047" +
    "\025\050\036\051\031\052\014\053\007\001\002\000\050" +
    "\003\026\004\010\005\035\007\015\010\040\011\033\012" +
    "\016\013\020\014\011\016\162\017\163\025\022\026\013" +
    "\041\012\047\025\050\036\051\031\052\014\053\007\001" +
    "\002\000\044\003\026\004\010\005\035\007\015\010\040" +
    "\011\033\012\016\013\020\014\011\025\022\026\013\041" +
    "\012\047\025\050\036\051\031\052\014\053\007\001\002" +
    "\000\054\002\uffee\003\uffee\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\016\uffee" +
    "\017\uffee\025\uffee\026\uffee\041\uffee\047\uffee\050\uffee\051" +
    "\uffee\052\uffee\053\uffee\001\002\000\046\003\026\004\010" +
    "\005\035\007\015\010\040\011\033\012\016\013\020\014" +
    "\011\017\165\025\022\026\013\041\012\047\025\050\036" +
    "\051\031\052\014\053\007\001\002\000\054\002\uffed\003" +
    "\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\016\uffed\017\uffed\025\uffed\026" +
    "\uffed\041\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\001\002\000\010\023\uffe8\024\uffe8\036\172\001\002\000" +
    "\006\023\uffea\024\170\001\002\000\004\047\171\001\002" +
    "\000\006\023\uffe9\024\uffe9\001\002\000\024\007\015\025" +
    "\022\026\013\041\012\047\056\050\036\051\031\052\014" +
    "\053\007\001\002\000\004\023\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\052\003\044\004\036\005\042\006\005\007" +
    "\041\010\020\011\040\012\033\013\022\015\046\016\026" +
    "\024\003\027\016\030\031\032\045\033\004\034\043\035" +
    "\047\036\027\037\023\001\001\000\004\025\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\044\027\016\030\031\032\045" +
    "\033\004\034\043\035\047\036\156\037\023\001\001\000" +
    "\016\027\016\030\031\032\154\033\004\034\043\035\047" +
    "\001\001\000\004\031\152\001\001\000\002\001\001\000" +
    "\022\003\044\027\016\030\031\032\101\033\004\034\043" +
    "\035\047\037\150\001\001\000\002\001\001\000\004\035" +
    "\136\001\001\000\024\003\044\027\016\030\031\032\045" +
    "\033\004\034\043\035\047\036\133\037\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\113\001\001\000\004\024\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\044\004\051\005\042\006\005\007" +
    "\041\010\020\011\040\012\033\013\022\016\026\024\003" +
    "\027\016\030\031\032\045\033\004\034\043\035\047\036" +
    "\027\037\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\027\016\030\031\033\071\034" +
    "\043\035\047\001\001\000\014\027\016\030\031\033\054" +
    "\034\043\035\047\001\001\000\002\001\001\000\004\002" +
    "\057\001\001\000\016\027\016\030\031\032\063\033\004" +
    "\034\043\035\047\001\001\000\002\001\001\000\016\027" +
    "\016\030\031\032\061\033\004\034\043\035\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\027\016\030\031\034\070\035\047" +
    "\001\001\000\012\027\016\030\031\034\067\035\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\106\027\016\030\031\032\101\033\004\034" +
    "\043\035\047\001\001\000\020\003\105\027\016\030\031" +
    "\032\101\033\004\034\043\035\047\001\001\000\020\003" +
    "\104\027\016\030\031\032\101\033\004\034\043\035\047" +
    "\001\001\000\020\003\103\027\016\030\031\032\101\033" +
    "\004\034\043\035\047\001\001\000\020\003\102\027\016" +
    "\030\031\032\101\033\004\034\043\035\047\001\001\000" +
    "\020\003\100\027\016\030\031\032\101\033\004\034\043" +
    "\035\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\044\027\016\030\031\032\045\033\004\034" +
    "\043\035\047\036\123\037\023\001\001\000\002\001\001" +
    "\000\024\003\044\027\016\030\031\032\045\033\004\034" +
    "\043\035\047\036\125\037\023\001\001\000\002\001\001" +
    "\000\022\003\044\027\016\030\031\032\101\033\004\034" +
    "\043\035\047\037\131\001\001\000\022\003\044\027\016" +
    "\030\031\032\101\033\004\034\043\035\047\037\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\044\004\036\005\042\006\005\007\041\010" +
    "\020\011\040\012\033\013\022\015\134\016\026\024\003" +
    "\027\016\030\031\032\045\033\004\034\043\035\047\036" +
    "\027\037\023\001\001\000\050\003\044\004\051\005\042" +
    "\006\005\007\041\010\020\011\040\012\033\013\022\016" +
    "\026\024\003\027\016\030\031\032\045\033\004\034\043" +
    "\035\047\036\027\037\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\044\004\036\005\042\006" +
    "\005\007\041\010\020\011\040\012\033\013\022\015\160" +
    "\016\026\024\003\027\016\030\031\032\045\033\004\034" +
    "\043\035\047\036\027\037\023\001\001\000\050\003\044" +
    "\004\051\005\042\006\005\007\041\010\020\011\040\012" +
    "\033\013\022\016\026\024\003\027\016\030\031\032\045" +
    "\033\004\034\043\035\047\036\027\037\023\001\001\000" +
    "\052\003\044\004\036\005\042\006\005\007\041\010\020" +
    "\011\040\012\033\013\022\015\163\016\026\024\003\027" +
    "\016\030\031\032\045\033\004\034\043\035\047\036\027" +
    "\037\023\001\001\000\002\001\001\000\050\003\044\004" +
    "\051\005\042\006\005\007\041\010\020\011\040\012\033" +
    "\013\022\016\026\024\003\027\016\030\031\032\045\033" +
    "\004\034\043\035\047\036\027\037\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\044\027\016\030\031" +
    "\032\045\033\004\034\043\035\047\036\172\037\023\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input1.txt");
  FileInputStream fis = null;
  br = new BufferedReader(new InputStreamReader(new FileInputStream(file)));



  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);


    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token();
 
    }

//@@CUPDBG0

  protected Lexer lexer;
  public ArrayList<Variable> variables = new ArrayList<>(); 
  ArrayList<Integer> temp = new ArrayList<>();	
  public ArrayList<String> mensajeError = new ArrayList<>();
  public ArrayList<String> salidaParser = new ArrayList<>();
  ErrorCheck err = new ErrorCheck();
  String lectura;
  BufferedReader br; 
  Boolean declarada;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // blq_sentencias ::= blq_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blq_sentencias",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= blq_sentencias EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // blq_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blq_sentencias",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencia ::= sent_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= sent_uso 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= sent_flujo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent_decl ::= decl_variable SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent_decl ::= decl_vector SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent_uso ::= asignacion SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_uso",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent_uso ::= expresion SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_uso",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent_uso ::= error SEMI 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 RESULT = e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_uso",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent_flujo ::= condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_flujo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent_flujo ::= bucle 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent_flujo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // asignacion ::= ID ASIG expresion 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4
	declarada = false;
														for (Variable variable : variables) {
															if(variable.id.equals(String.valueOf(e1))) {
																declarada = true;
																if (err.asignacion_check(variable.tipo, e2)){
																	if (variable.tipo.equals("REAL")) variable.valor = TypeConvert.toReal(e2);
																	else if (variable.tipo.equals("ENTERO")) variable.valor = TypeConvert.toInteger(e2);
																	else variable.valor = e2;
																	String message = e1+" = "+e2;
																	salidaParser.add(message);
																}
																else {
																	if (!String.valueOf(e2).equals("null")){																		
																		String message = "Error: "+e1+" = "+e2+"\nNo se puede asignar una variable de tipo "+e2.getClass().getSimpleName()+" a un " +variable.tipo+"\n";
																		mensajeError.add(message);
																	}
																	else {
																			
																		String message = "Error: "+e1+" = "+String.valueOf(e2)+"\nFallo de asignacion \n";
																		mensajeError.add(message);
																	}
																	
																}
																break;
															}
														}
													if (!declarada) {
														String message = "Error: "+e1+" = "+e2+"\nLa variable '"+e1+"' no esta declarada\n";
														mensajeError.add(message);
													 }
													
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignacion ::= ID v_exp_list ASIG expresion 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5
  declarada = false;
												
												
														for (Variable variable : variables) {
															if(variable.id.equals(String.valueOf(e1))){
																declarada = true;
																													
																/*if (!temp.get(0).getClass().getSimpleName().equals("Integer")||temp.get(0) - 1<0) {
																	String message = "Error: "+e1+" = "+e2+"\nLa posicion del vector tiene que ser un entero positivo\n";
																	mensajeError.add(message);
																}*/
																int pos = temp.get(0) - 1;
																for(int i = 1 ; i < variable.dimension.length; i++) {
																	int ponderacion = 1;
																	for(int j = 0; j < i ; j++) ponderacion = ponderacion * variable.dimension[j];
																	pos = pos + ponderacion * (temp.get(i)-1); 
																}
																
																
																if (err.asignacion_check(variable.tipo, e2)){
																	if (variable.tipo.equals("VECTOR_REAL")) variable.vector[pos] = TypeConvert.toReal(e2);
																	else if (variable.tipo.equals("VECTOR_ENTERO")) variable.vector[pos] = TypeConvert.toInteger(e2);
																	else variable.vector[pos] = e2;
																}
																else {
																	if (!String.valueOf(e2).equals("null")){																		
																		String message = "Error: "+e1+" = "+e2+"\nNo se puede asignar una variable de tipo "+e2.getClass().getSimpleName()+" a un " +variable.tipo+"\n";
																		mensajeError.add(message);
																	}
																	else {
																		String message = "Error: "+e1+" = "+String.valueOf(e2)+"\nFallo de asignacion \n";
																		mensajeError.add(message);
																	}
																	
																}
																
																temp.clear();
															}
														}
														if (!declarada) {
														String message = "Error: "+e1+" = "+e2+"\nLa variable '"+e1+"' no esta declarada\n";
														mensajeError.add(message);
													 }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= e_float 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6
 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= e_boolean 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // v_exp_list ::= LBRACK e_float RBRACK 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG8
 if (String.valueOf(e).equals("null")||!e.getClass().getSimpleName().equals("Integer")) {
													   	String message = "Error: ["+e+"]\n"+e+"La posicion de un vector tiene que ser un entero\n";
													   	mensajeError.add(message); }
													   else if (e.getClass().getSimpleName().equals("Integer")) temp.add(TypeConvert.toInteger(e));
													   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("v_exp_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // v_exp_list ::= v_exp_list LBRACK e_float RBRACK 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG9
 if (String.valueOf(e).equals("null")||!e.getClass().getSimpleName().equals("Integer")) {
													   	String message = "Error: ["+e+"]\n"+e+"La posicion de un vector tiene que ser un entero\n";
													   	mensajeError.add(message); }
														else if (e.getClass().getSimpleName().equals("Integer")) temp.add(TypeConvert.toInteger(e));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("v_exp_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condicional ::= SI expresion ENTONCES blq_sentencias FINSI 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG10
 if (String.valueOf(e).equals("null") || !e.getClass().getSimpleName().equals("Boolean")) {
																	String message = "Error: SI "+e+" ENTONCES\n'"+e+"' debe ser una expresion booleana\n";
																	mensajeError.add(message);
																}
															  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condicional ::= SI expresion ENTONCES blq_sentencias SINO blq_sentencias FINSI 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		//@@CUPDBG11
 if (String.valueOf(e).equals("null") ||!e.getClass().getSimpleName().equals("Boolean")) {
																	String message = "Error: SI "+e+" ENTONCES\n'"+e+"' debe ser una expresion booleana\n";
																	mensajeError.add(message);
																}
															  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bucle ::= MIENTRAS expresion blq_sentencias FINMIENTRAS 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG12
 if (!e.getClass().getSimpleName().equals("Boolean")) {
																	String message = "Error: MIENTRAS "+e+"\n'"+e+"' debe ser una expresion booleana\n";
																	mensajeError.add(message);
																}
															  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bucle",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decl_variable ::= keytipo ID ASIG expresion 
            {
              Object RESULT =null;
		Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13
	if (err.asignacion_check(String.valueOf(k),e2)) {
														String message = e1+" = "+e2; 
														salidaParser.add(message);
														if (k.equals("REAL")) variables.add(new Variable(String.valueOf(k),String.valueOf(e1), TypeConvert.toReal(e2))); 
														else if (k.equals("ENTERO")) variables.add(new Variable(String.valueOf(k),String.valueOf(e1), TypeConvert.toInteger(e2))); 	
														else variables.add(new Variable(String.valueOf(k),String.valueOf(e1), e2)); 						
													}
													else {
														if (!String.valueOf(e2).equals("null")){
															String message = "Error: "+k+" "+e1+" = "+e2+"\nNo se puede asignar una variable de tipo "+e2.getClass().getSimpleName()+" a un " +k+"\n";
															mensajeError.add(message);
															
														}
														else {
															String message = "Error: "+k+" "+e1+" = "+String.valueOf(e2)+"\nFallo de asignacion \n";
															//report_error(message, null);
															mensajeError.add(message);
														}
													}
													
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decl_variable ::= keytipo more_v 
            {
              Object RESULT =null;
		Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14
 for (Variable variable : variables) {
															if(variable.tipo.equals(String.valueOf('c')))
																variable.tipo = String.valueOf(k);
														}
													
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_variable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // more_v ::= more_v COMA ID 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
String message = "Declarado: "+e1;
													  salidaParser.add(message);
													  variables.add(new Variable(String.valueOf('c'),String.valueOf(e1),null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_v",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // more_v ::= ID 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG16
String message = "Declarado: "+e1;
													  salidaParser.add(message);
													  variables.add(new Variable(String.valueOf('c'),String.valueOf(e1),null));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_v",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // keytipo ::= ENTERO 
            {
              Object RESULT =null;
		//@@CUPDBG17
 RESULT = "ENTERO"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keytipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // keytipo ::= REAL 
            {
              Object RESULT =null;
		//@@CUPDBG18
 RESULT = "REAL"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keytipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // keytipo ::= BOOLEANO 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG19
 RESULT = "BOOLEANO"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keytipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // keytipo ::= CARACTER 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG20
 RESULT = "CARACTER"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("keytipo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // decl_vector ::= VECTOR keytipo ID v_exp_list 
            {
              Object RESULT =null;
		Location kxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location kxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object k = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21
	int longitud = 1;
														for (Integer in : temp) longitud = longitud * in;
														if(String.valueOf(k).toUpperCase().equals("ENTERO"))variables.add(new Variable("VECTOR_ENTERO",String.valueOf(e1),new Integer[longitud], (Integer[])temp.toArray(new Integer[0])));
														else if(String.valueOf(k).toUpperCase().equals("REAL"))variables.add(new Variable("VECTOR_REAL",String.valueOf(e1),new Float[longitud], (Integer[])temp.toArray(new Integer[0])));
														else if(String.valueOf(k).toUpperCase().equals("BOOLEANO"))variables.add(new Variable("VECTOR_BOOLEANO",String.valueOf(e1),new Boolean[longitud], (Integer[])temp.toArray(new Integer[0])));
														else if(String.valueOf(k).toUpperCase().equals("CARACTER"))variables.add(new Variable("VECTOR_CARACTER",String.valueOf(e1),new Character[longitud], (Integer[])temp.toArray(new Integer[0])));													
														
														temp.clear();
													
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_vector",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_list ::= e_float 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22
 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // e_float ::= e_float PLUS t_float 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23
 if (err.checkOperation(e1, e2)==0) {
												   		if (e1.getClass().getSimpleName().equals("Float")||e2.getClass().getSimpleName().equals("Float")) {
															RESULT = TypeConvert.toReal(e1)+TypeConvert.toReal(e2);}
														else if (e1.getClass().getSimpleName().equals("Integer")||e2.getClass().getSimpleName().equals("Integer")) RESULT = TypeConvert.toInteger(e1)+TypeConvert.toInteger(e2);
												   }
												   else if (err.checkOperation(e1, e2)==-2) {
														String message = "Error: "+e1+"+"+e2+"\nNo se pueden hacer operaciones con booleano\n";
														//String message = "Error: "+lectura+"\n No se pueden hacer operaciones con booleano\n";
														mensajeError.add(message);  
	
													}
													else {
														String message = "Error: "+e1+"+"+e2+"\nOperandos no validos\n";
														//report_error(message, null); 
														mensajeError.add(message); 
														
													}  
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e_float",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // e_float ::= e_float MINUS t_float 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
 if (err.checkOperation(e1, e2)==0) {
													if (e1.getClass().getSimpleName().equals("Float")||e2.getClass().getSimpleName().equals("Float")) RESULT = TypeConvert.toReal(e1)-TypeConvert.toReal(e2);
														else if (e1.getClass().getSimpleName().equals("Integer")||e2.getClass().getSimpleName().equals("Integer")) RESULT = TypeConvert.toInteger(e1)-TypeConvert.toInteger(e2);
													}
												    else if (err.checkOperation(e1, e2)==-2){
														String message = "Error: "+e1+"-"+e2+"\nNo se pueden hacer operaciones con booleano\n";
														//report_error(message, null);  
														mensajeError.add(message);
													} 
													else {
														String message = "Error: "+e1+"-"+e2+"\nOperandos no validos\n";
														//report_error(message, null); 
														mensajeError.add(message); 
														
													}     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e_float",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // e_float ::= t_float 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25
 RESULT = e1;        	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e_float",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // t_float ::= t_float TIMES f_float 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26
 if (err.checkOperation(e1, e2)==0) {
												   if (e1.getClass().getSimpleName().equals("Float")||e2.getClass().getSimpleName().equals("Float")) RESULT = TypeConvert.toReal(e1)*TypeConvert.toReal(e2);
													else if (e1.getClass().getSimpleName().equals("Integer")||e2.getClass().getSimpleName().equals("Integer")) RESULT = TypeConvert.toInteger(e1)*TypeConvert.toInteger(e2);
												   }
												   else if (err.checkOperation(e1, e2)==-2) {
														String message = "Error: "+e1+"*"+e2+"\nNo se pueden hacer operaciones con booleano\n";
														//report_error(message, null); 
														mensajeError.add(message);
													} 
													else {
														String message = "Error: "+e1+"*"+e2+"\nOperandos no validos\n";
														//report_error(message, null);  
														mensajeError.add(message);
														
													}        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("t_float",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // t_float ::= t_float DIVIDEBY f_float 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
 if (err.checkOperation(e1, e2)==0) {
													RESULT = TypeConvert.toReal(e1)/TypeConvert.toReal(e2);
													}  
												   else if (err.checkOperation(e1, e2)==-2){
														String message = "Error: "+e1+"/"+e2+"\nNo se pueden hacer operaciones con booleano\n";
														//report_error(message, null); 
														mensajeError.add(message); 
													} 
													else {
														String message = "Error: "+e1+"/"+e2+"\nOperandos no validos\n";
														//report_error(message, null);
														mensajeError.add(message);  
														
													}      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("t_float",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // t_float ::= f_float 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
 RESULT = e1;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("t_float",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // f_float ::= par_neg INT_NUMBER 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29
 RESULT = TypeConvert.toInteger(e1);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_float",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // f_float ::= impar_neg INT_NUMBER 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30
 RESULT = -TypeConvert.toInteger(e1);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_float",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // f_float ::= INT_NUMBER 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG31
 RESULT = TypeConvert.toInteger(e1);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_float",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // f_float ::= CHAR 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		char e1 = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32
 RESULT = TypeConvert.toInteger(e1);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_float",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // f_float ::= par_neg DEC_NUMBER 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33
 RESULT = TypeConvert.toReal(e1);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_float",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // f_float ::= impar_neg DEC_NUMBER 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34
 RESULT = -TypeConvert.toReal(e1);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_float",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // f_float ::= par_neg p_float 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG35
 if (e1.getClass().getSimpleName().equals("Float")) RESULT = TypeConvert.toReal(e1);
												   else  RESULT=TypeConvert.toInteger(e1);           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_float",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // f_float ::= impar_neg p_float 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36
 if (e1.getClass().getSimpleName().equals("Float")) RESULT = -TypeConvert.toReal(e1);
												   else  RESULT=-TypeConvert.toInteger(e1);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_float",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // f_float ::= DEC_NUMBER 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG37
 RESULT = TypeConvert.toReal(e1);        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_float",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // f_float ::= p_float 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38
 RESULT = e1;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_float",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // f_float ::= ID 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG39
 for (Variable variable : variables) {
															if(variable.id.equals(String.valueOf(e1))) {
																if (variable.tipo.equals("REAL")) RESULT = TypeConvert.toReal(variable.valor);
																else if (variable.tipo.equals("ENTERO")) RESULT = TypeConvert.toInteger(variable.valor);
																else if (variable.tipo.equals("BOOLEANO")) RESULT = variable.valor;
																/*else {
																 String message = "Error: "+e1+" No se pueden hacer operaciones con booleano\n";
																 //report_error(message, null);
																mensajeError.add(message);
																}*/
															}
														}       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_float",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // f_float ::= ID v_exp_list 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG40
  
														for (Variable variable : variables) {
															if(variable.id.equals(String.valueOf(e1))){
																int pos = temp.get(0) - 1;
																for(int i = 1 ; i < variable.dimension.length; i++) {
																	int ponderacion = 1;
																	for(int j = 0; j < i ; j++) ponderacion = ponderacion * variable.dimension[j];
																	pos = pos + ponderacion * (temp.get(i)-1); 
																}
																if (variable.tipo.equals("VECTOR_REAL")) RESULT = TypeConvert.toReal(variable.vector[pos]);
																else if (variable.tipo.equals("VECTOR_ENTERO") || variable.tipo.equals("VECTOR_CARACTER")) RESULT = TypeConvert.toInteger(variable.vector[pos]);
																else if (variable.tipo.equals("VECTOR_BOOLEANO")) RESULT = variable.vector[pos];
															    temp.clear();
															}
														}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_float",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // f_float ::= NOT e_boolean 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG41
 RESULT = !(boolean)e1;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_float",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // f_float ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG42
 RESULT = e1;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("f_float",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // p_float ::= LPAREN e_float RPAREN 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG43
 RESULT = e1;        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("p_float",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // e_boolean ::= expr_list EQEQ expr_list 
            {
              Boolean RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44
    
														if (err.checkOperation(e1, e2)==0) {
														RESULT = (e1.equals(e2)); 
													}
													else if (err.checkOperation(e1, e2)==-2) {
														String message = "Error: "+e1+"=="+e2+"\nNo se puede comparar booleanos\n";
														mensajeError.add(message);
													}
													else {
														 String message = "Error: "+e1+"=="+e2+"\nOperandos no validos\n";
														mensajeError.add(message);
													}
												 
													
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e_boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // e_boolean ::= expr_list LTEQ expr_list 
            {
              Boolean RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG45
  if (err.checkOperation(e1, e2)==0) {
														RESULT = ((Float.valueOf(String.valueOf(e1))) <= (Float.valueOf(String.valueOf(e2))));
													}
													else if (err.checkOperation(e1, e2)==-2) {
														String message = "Error: "+e1+"<="+e2+"\nNo se puede comparar booleanos\n";
														mensajeError.add(message);
													}
													else {
														 String message = "Error: "+e1+"<="+e2+"\nOperandos no validos\n";
														mensajeError.add(message);
													}
												  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e_boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // e_boolean ::= expr_list GTEQ expr_list 
            {
              Boolean RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG46
  
													if (err.checkOperation(e1, e2)==0) {
														RESULT = ((Float.valueOf(String.valueOf(e1))) >= (Float.valueOf(String.valueOf(e2))));
													}
													else if (err.checkOperation(e1, e2)==-2) {
														String message = "Error: "+e1+">="+e2+"\nNo se puede comparar booleanos\n";
														mensajeError.add(message);
													}
													else {
														 String message = "Error: "+e1+">="+e2+"\nOperandos no validos\n";
														mensajeError.add(message);
													}
   												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e_boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // e_boolean ::= expr_list NOTEQ expr_list 
            {
              Boolean RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG47
 if (err.checkOperation(e1, e2)==0) {
														RESULT = ((Float.valueOf(String.valueOf(e1))) != (Float.valueOf(String.valueOf(e2))));
													}
													else if (err.checkOperation(e1, e2)==-2) {
														String message = "Error: "+e1+"!="+e2+"\nNo se puede comparar booleanos\n";
														mensajeError.add(message);
													}
													else {
														 String message = "Error: "+e1+"!="+e2+"\nOperandos no validos\n";
														mensajeError.add(message);
													}
   												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e_boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // e_boolean ::= expr_list LT expr_list 
            {
              Boolean RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG48
 if (err.checkOperation(e1, e2)==0) {
														RESULT = ((Float.valueOf(String.valueOf(e1))) < (Float.valueOf(String.valueOf(e2))));
													}
													else if (err.checkOperation(e1, e2)==-2) {
														String message = "Error: "+e1+"<"+e2+"\nNo se puede comparar booleanos\n";
														mensajeError.add(message);
													}
													else {
														String message = "Error: "+e1+"<"+e2+"\nOperandos no validos\n";
														mensajeError.add(message);
													}
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e_boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // e_boolean ::= expr_list GT expr_list 
            {
              Boolean RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG49
 if (err.checkOperation(e1, e2)==0) {
														RESULT = ((Float.valueOf(String.valueOf(e1))) > (Float.valueOf(String.valueOf(e2))));
													}
													else if (err.checkOperation(e1, e2)==-2) {
														String message = "Error: "+e1+">"+e2+"\nNo se puede comparar booleanos\n";
														mensajeError.add(message);
													}
													else {
														 String message = "Error: "+e1+">"+e2+"\nOperandos no validos\n";
														mensajeError.add(message);
													}
										        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e_boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // e_boolean ::= e_boolean OR e_boolean 
            {
              Boolean RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG50
 RESULT = (((boolean)e1) || ((boolean)e2));        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e_boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // e_boolean ::= e_boolean AND e_boolean 
            {
              Boolean RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51
 RESULT = (((boolean)e1) && ((boolean)e2));        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e_boolean",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // par_neg ::= MINUS MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_neg",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // par_neg ::= par_neg MINUS MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_neg",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // par_neg ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_neg",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // par_neg ::= par_neg PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_neg",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // par_neg ::= MINUS plus MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_neg",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // par_neg ::= par_neg MINUS plus MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_neg",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // impar_neg ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impar_neg",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // impar_neg ::= MINUS plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impar_neg",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // impar_neg ::= par_neg MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impar_neg",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // impar_neg ::= par_neg MINUS plus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impar_neg",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // plus ::= plus PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plus",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // plus ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plus",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
