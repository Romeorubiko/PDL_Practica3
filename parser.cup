package generado;

import java_cup.runtime.*;
import generado.Lexer;
import manual.Variable;
import java.util.ArrayList;
import java.lang.reflect.Array;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import manual.ErrorCheck;
import manual.TypeConvert;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;



parser code {:
  protected Lexer lexer;
  public ArrayList<Variable> variables = new ArrayList<>(); 
  ArrayList<Integer> temp = new ArrayList<>();
  public ArrayList<String> mensajeError = new ArrayList<>();
  public ArrayList<String> salidaParser = new ArrayList<>();
  ErrorCheck err = new ErrorCheck();
  Boolean declarada;

:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input2.txt");
  FileInputStream fis = null;




  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

:};
scan with {: return lexer.next_token();
 :};
 


/* Terminals (tokens returned by the scanner). */
terminal   ENTERO, REAL, FINMIENTRAS, NOT, BOOLEANO, VECTOR, CARACTER
, MIENTRAS, SI, ENTONCES, SINO, FINSI, AND, OR, EQ, SEMI, COMA, PLUS, MINUS, TIMES, EQEQ
, LTEQ, GTEQ, NOTEQ, LT, GT, ASIG, SAL, DIVIDEBY, LPAREN, RPAREN, LBRACK, RBRACK, LCURVY
, RCURVY, ID;
terminal Integer    	INT_NUMBER;       
terminal Float 			DEC_NUMBER;
terminal Boolean		BOOLEAN_LITERAL;
terminal char 			CHAR;
/* Non terminals */
non terminal       		v_exp_list,expr_list, sentencia, sent_decl,sent_uso,sent_flujo,decl_variable,asignacion
,condicional,bucle, operando, blq_sentencias, decl_vector,def_funcion,lista_args
,argumento, uso_funcion, lista_expresiones,keytipo, more_v, exp_error;

non terminal           	par_neg, impar_neg, plus;
non terminal Object 		e_float, t_float, f_float, p_float;
non terminal Object 	expresion;
non terminal Boolean  	e_boolean;


/* Precedences */
precedence left AND, OR;
precedence nonassoc GT, LT, EQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDEBY;



/* The grammar rules */
blq_sentencias	::= blq_sentencias sentencia
			| sentencia				   
			;
sentencia 	::= sent_decl
			| sent_uso
			| sent_flujo
			;
sent_decl 	::= decl_variable SEMI			    
			| decl_vector SEMI					
			;
sent_uso 	::= asignacion SEMI                 
			| expresion SEMI                    
			| error SEMI 
			;
sent_flujo 		::= condicional                 
			| bucle                             
    		;
asignacion ::= ID:e1 ASIG expresion:e2				{:	declarada = false;
														for (Variable variable : variables) {
															if(variable.id.equals(String.valueOf(e1))) {
																declarada = true;
																if (err.asignacion_check(variable.tipo, e2)){
																	if (variable.tipo.equals("REAL")) variable.valor = TypeConvert.toReal(e2);
																	else if (variable.tipo.equals("ENTERO")) variable.valor = TypeConvert.toInteger(e2);
																	else variable.valor = e2;
																	String message = e1+" = "+e2;
																	salidaParser.add(message);
																}
																else {
																	if (!String.valueOf(e2).equals("null")){																		
																		String message = "\nError: "+e1+" = "+e2+"\nNo se puede asignar una variable de tipo "+e2.getClass().getSimpleName()+" a un " +variable.tipo+"\n";
																		mensajeError.add(message);
																	}
																	else {
																			
																		String message = "\nError: "+e1+" = "+String.valueOf(e2)+"\nFallo de asignacion \n";
																		mensajeError.add(message);
																	}
																	
																}
																break;
															}
														}
													if (!declarada) {
														String message = "\nError: "+e1+" = "+e2+"\nLa variable '"+e1+"' no esta declarada\n";
														mensajeError.add(message);
													 }
													:}
													
			|ID:e1 v_exp_list ASIG expresion:e2		{:  declarada = false;
														for (Variable variable : variables) {
															if(variable.id.equals(String.valueOf(e1))){
																declarada = true;
																boolean error = false;
																if(variable.dimension.length != temp.size()){
																	String message = "\nError: "+e1+" = "+e2+"\nNo coinciden las dimensiones del vector \n";
																	mensajeError.add(message);	
																	error = true;
																}
																else{
																	for(int i = 0 ; i < temp.size(); i++) {
																		if(variable.dimension[i]<temp.get(i)){
																			String message = "\nError: "+e1+" = "+e2+"\nLlamada a vector fuera de los límites \n";
																			mensajeError.add(message);
																			error = true;
																			break; 
																		}
																	}
																}
																
																int pos = temp.get(0) - 1;

																if(!error){
																
																	for(int i = 1 ; i < variable.dimension.length; i++) {
																		int ponderacion = 1;
																			for(int j = 0; j < i ; j++) ponderacion = ponderacion * variable.dimension[j];
																				pos = pos + ponderacion * (temp.get(i)-1); 
																	}
																}
																
																															
																if (err.asignacion_check(variable.tipo, e2)){
																	if (variable.tipo.equals("VECTOR_REAL")) variable.vector[pos] = TypeConvert.toReal(e2);
																	else if (variable.tipo.equals("VECTOR_ENTERO")) variable.vector[pos] = TypeConvert.toInteger(e2);
																	else variable.vector[pos] = e2;
																}
																else {
																	if (!String.valueOf(e2).equals("null")){																		
																		String message = "\nError: "+e1+" = "+e2+"\nNo se puede asignar una variable de tipo "+e2.getClass().getSimpleName()+" a un " +variable.tipo+"\n";
																		mensajeError.add(message);
																	}
																	else {
																		String message = "\nError: "+e1+" = "+String.valueOf(e2)+"\nFallo de asignacion \n";
																		mensajeError.add(message);
																	}
																	
																}
																
																
															}
														}
														if (!declarada) {
														String message = "\nError: "+e1+" = "+e2+"\nLa variable '"+e1+"' no esta declarada\n";
														mensajeError.add(message);
													 }
														temp.clear(); :}
														
	      
			;    		
expresion	::= e_float:e 							{: RESULT = e;:}
			| e_boolean:e 							{: RESULT = e;:}
			;
			
v_exp_list  ::= LBRACK e_float:e RBRACK				{: if (String.valueOf(e).equals("null")||!e.getClass().getSimpleName().equals("Integer")) {
													   	String message = "\nError: ["+e+"]\nLa posicion de un vector tiene que ser un entero\n";
													   	mensajeError.add(message); 
														RESULT = -1;}
													   else if (e.getClass().getSimpleName().equals("Integer")) temp.add(TypeConvert.toInteger(e));
													   :}
													   
			| v_exp_list LBRACK e_float:e RBRACK	{: if (String.valueOf(e).equals("null")||!e.getClass().getSimpleName().equals("Integer")) {
													   	String message = "\nError: ["+e+"]\nLa posicion de un vector tiene que ser un entero\n";
													   	mensajeError.add(message);
														RESULT = -1; }
														else if (e.getClass().getSimpleName().equals("Integer")) temp.add(TypeConvert.toInteger(e));:}
			;
condicional ::= SI expresion:e ENTONCES blq_sentencias FINSI {: if (String.valueOf(e).equals("null") || !e.getClass().getSimpleName().equals("Boolean")) {
																	String message = "\nError: SI "+e+" ENTONCES\n'"+e+"' debe ser una expresion booleana\n";
																	mensajeError.add(message);
																}
															  :}
			| SI expresion:e ENTONCES
			blq_sentencias
			SINO
			blq_sentencias
			FINSI											{: if (String.valueOf(e).equals("null") ||!e.getClass().getSimpleName().equals("Boolean")) {
																	String message = "\nError: SI "+e+" ENTONCES\n'"+e+"' debe ser una expresion booleana\n";
																	mensajeError.add(message);
																}
															  :}							
			;
bucle ::= MIENTRAS expresion:e blq_sentencias FINMIENTRAS   {: if (String.valueOf(e).equals("null") ||!e.getClass().getSimpleName().equals("Boolean")) {
																	String message = "\nError: MIENTRAS "+e+"\n'"+e+"' debe ser una expresion booleana\n";
																	mensajeError.add(message);
																}
															  :}
			;
decl_variable ::= keytipo:k ID:e1 ASIG expresion:e2 {: declarada = false;
												    
													for (Variable variable : variables) {
															if (variable.id.equals(String.valueOf(e1))) {
																declarada = true;
																String message = "\nError: "+k+" "+e1+" = "+String.valueOf(e2)+"\nLa variable ya esta declarada\n";
																mensajeError.add(message);
															}
														}
													if (!declarada) {
														if (err.asignacion_check(String.valueOf(k),e2)) {
															String message = e1+" = "+e2; 
															salidaParser.add(message);
															if (k.equals("REAL")) variables.add(new Variable(String.valueOf(k),String.valueOf(e1), TypeConvert.toReal(e2))); 
															else if (k.equals("ENTERO")) variables.add(new Variable(String.valueOf(k),String.valueOf(e1), TypeConvert.toInteger(e2))); 	
															else variables.add(new Variable(String.valueOf(k),String.valueOf(e1), e2)); 						
														}
													else {
														if (!String.valueOf(e2).equals("null")){
															String message = "\nError: "+k+" "+e1+" = "+e2+"\nNo se puede asignar una variable de tipo "+e2.getClass().getSimpleName()+" a un " +k+"\n";
															mensajeError.add(message);
															
														}
														else {
															String message = "\nError: "+k+" "+e1+" = "+String.valueOf(e2)+"\nFallo de asignacion \n";
															//report_error(message, null);
															mensajeError.add(message);
														}
													}}
													:}
													
			| keytipo:k more_v:e1					{: for (Variable variable : variables) {
															if(variable.tipo.equals(String.valueOf('c')))
																variable.tipo = String.valueOf(k);
														}
													:}

			;
more_v ::= more_v COMA ID:e1						{:declarada = false;
													  for (Variable variable : variables) {
															if (variable.id.equals(String.valueOf(e1))) {
																declarada = true;
																String message = "\nError: "+e1+"\nLa variable '"+e1+"' ya esta declarada\n";
																mensajeError.add(message);
															}
														}
													  if (!declarada) variables.add(new Variable(String.valueOf('c'),String.valueOf(e1),null));:}
			| ID:e1									{:declarada = false;
													  for (Variable variable : variables) {
															if (variable.id.equals(String.valueOf(e1))) {
																declarada = true;
																String message = "\nError: "+e1+"\nLa variable '"+e1+"' ya esta declarada\n";
																mensajeError.add(message);
															}
														}
													  if (!declarada)	
													  variables.add(new Variable(String.valueOf('c'),String.valueOf(e1),null));:}
			;
keytipo		::= ENTERO								{: RESULT = "ENTERO"; :}
			| REAL									{: RESULT = "REAL"; :}
			| BOOLEANO:e							{: RESULT = "BOOLEANO"; :}
			| CARACTER:e 							{: RESULT = "CARACTER"; :}
			;
decl_vector ::= VECTOR keytipo:k ID:e1 v_exp_list:e2{:	if(!String.valueOf(e2).equals("-1")){	
														int longitud = 1;
														for (Integer in : temp) longitud = longitud * in;
														if(String.valueOf(k).toUpperCase().equals("ENTERO"))variables.add(new Variable("VECTOR_ENTERO",String.valueOf(e1),new Integer[longitud], (Integer[])temp.toArray(new Integer[0])));
														else if(String.valueOf(k).toUpperCase().equals("REAL"))variables.add(new Variable("VECTOR_REAL",String.valueOf(e1),new Float[longitud], (Integer[])temp.toArray(new Integer[0])));
														else if(String.valueOf(k).toUpperCase().equals("BOOLEANO"))variables.add(new Variable("VECTOR_BOOLEANO",String.valueOf(e1),new Boolean[longitud], (Integer[])temp.toArray(new Integer[0])));
														else if(String.valueOf(k).toUpperCase().equals("CARACTER"))variables.add(new Variable("VECTOR_CARACTER",String.valueOf(e1),new Character[longitud], (Integer[])temp.toArray(new Integer[0])));													
														}
														temp.clear();
													
													:}
			;


expr_list 	    ::= e_float:e 					{: RESULT = e; :}
				;
e_float 		::=	e_float:e1 PLUS t_float:e2	{: if (err.checkOperation(e1, e2)==0) {
												   		if (e1.getClass().getSimpleName().equals("Float")||e2.getClass().getSimpleName().equals("Float")) {
															RESULT = TypeConvert.toReal(e1)+TypeConvert.toReal(e2);}
														else if (e1.getClass().getSimpleName().equals("Integer")||e2.getClass().getSimpleName().equals("Integer")) RESULT = TypeConvert.toInteger(e1)+TypeConvert.toInteger(e2);
												   }
												   else if (err.checkOperation(e1, e2)==-2) {
														String message = "\nError: "+e1+"+"+e2+"\nNo se pueden hacer operaciones con booleano\n";
														
														mensajeError.add(message);  
	
													}
													else {
														String message = "\nError: "+e1+"+"+e2+"\nOperandos no validos\n"; 
														mensajeError.add(message); 
														
													}  
      :}
				| e_float:e1 MINUS t_float:e2	{: if (err.checkOperation(e1, e2)==0) {
													if (e1.getClass().getSimpleName().equals("Float")||e2.getClass().getSimpleName().equals("Float")) RESULT = TypeConvert.toReal(e1)-TypeConvert.toReal(e2);
														else if (e1.getClass().getSimpleName().equals("Integer")||e2.getClass().getSimpleName().equals("Integer")) RESULT = TypeConvert.toInteger(e1)-TypeConvert.toInteger(e2);
													}
												    else if (err.checkOperation(e1, e2)==-2){
														String message = "\nError: "+e1+"-"+e2+"\nNo se pueden hacer operaciones con booleano\n"; 
														mensajeError.add(message);
													} 
													else {
														String message = "\nError: "+e1+"-"+e2+"\nOperandos no validos\n";
														mensajeError.add(message); 
														
													}     :}
				| t_float:e1					{: RESULT = e1;        	:}

				;
				
t_float 		::= t_float:e1 TIMES f_float:e2 {: if (err.checkOperation(e1, e2)==0) {
												   if (e1.getClass().getSimpleName().equals("Float")||e2.getClass().getSimpleName().equals("Float")) RESULT = TypeConvert.toReal(e1)*TypeConvert.toReal(e2);
													else if (e1.getClass().getSimpleName().equals("Integer")||e2.getClass().getSimpleName().equals("Integer")) RESULT = TypeConvert.toInteger(e1)*TypeConvert.toInteger(e2);
												   }
												   else if (err.checkOperation(e1, e2)==-2) {
														String message = "\nError: "+e1+"*"+e2+"\nNo se pueden hacer operaciones con booleano\n"; 
														mensajeError.add(message);
													} 
													else {
														String message = "\nError: "+e1+"*"+e2+"\nOperandos no validos\n";  
														mensajeError.add(message);
														
													}        :}
				| t_float:e1 DIVIDEBY f_float:e2{: if (err.checkOperation(e1, e2)==0) {
													RESULT = TypeConvert.toReal(e1)/TypeConvert.toReal(e2);
													}  
												   else if (err.checkOperation(e1, e2)==-2){
														String message = "\nError: "+e1+"/"+e2+"\nNo se pueden hacer operaciones con booleano\n";
														mensajeError.add(message); 
													} 
													else {
														String message = "\nError: "+e1+"/"+e2+"\nOperandos no validos\n";
														mensajeError.add(message);  
														
													}      :}
				| f_float:e1					{: RESULT = e1;        :}
				;
				
f_float 		::=  par_neg INT_NUMBER:e1		{: RESULT = TypeConvert.toInteger(e1);          :}
				| impar_neg INT_NUMBER:e1		{: RESULT = -TypeConvert.toInteger(e1);       :}
				| INT_NUMBER:e1					{: RESULT = TypeConvert.toInteger(e1);          :}
				| CHAR:e1						{: RESULT = e1;        :}
				|par_neg DEC_NUMBER:e1		    {: RESULT = TypeConvert.toReal(e1);        :}
				| impar_neg DEC_NUMBER:e1		{: RESULT = -TypeConvert.toReal(e1);       :}
				| par_neg  p_float:e1			{: if (e1.getClass().getSimpleName().equals("Float")) RESULT = TypeConvert.toReal(e1);
												   else  RESULT=TypeConvert.toInteger(e1);           :}
				| impar_neg  p_float:e1			{: if (e1.getClass().getSimpleName().equals("Float")) RESULT = -TypeConvert.toReal(e1);
												   else  RESULT=-TypeConvert.toInteger(e1);     :}
				| DEC_NUMBER:e1					{: RESULT = TypeConvert.toReal(e1);        :}
				| p_float:e1					{: RESULT = e1;        :}
				
				| ID:e1							{: for (Variable variable : variables) {
															if(variable.id.equals(String.valueOf(e1))) {
																if (!String.valueOf(variable.valor).equals("null")){
																	if (variable.tipo.equals("REAL")) RESULT = TypeConvert.toReal(variable.valor);
																	else if (variable.tipo.equals("ENTERO")||variable.tipo.equals("CARACTER")) RESULT = TypeConvert.toInteger(variable.valor);
																	else if (variable.tipo.equals("BOOLEANO")) RESULT = variable.valor;}
																else {
																		String message = "\nError: "+e1+"\nLa variable '"+e1+"' no esta inicializada\n";
																		mensajeError.add(message);
																}
																
															}
														}       :}

				| ID:e1	v_exp_list				{:  
																	for (Variable variable : variables) {
																		if(variable.id.equals(String.valueOf(e1))){
																				boolean error = false;

																				if(variable.dimension.length != temp.size()){
																					String message = "\nError: "+e1+"\nNo coinciden las dimensiones del vector \n";
																					mensajeError.add(message);	
																					error = true;
																				}
																				else{
																					for(int i = 0 ; i < temp.size(); i++) {
																						if(variable.dimension[i]<temp.get(i)){
																							String message = "\nError: "+e1+"\nLlamada a vector fuera de los límites \n";
																							mensajeError.add(message);
																							error = true;
																							break; 
																						}
																					}
																				}
																				int pos = temp.get(0) - 1;
																				if(!error){
							
																					for(int i = 1 ; i < variable.dimension.length; i++) {
																						int ponderacion = 1;
																						for(int j = 0; j < i ; j++) ponderacion = ponderacion * variable.dimension[j];
																							pos = pos + ponderacion * (temp.get(i)-1); 
																						}
																				}
																				if (variable.tipo.equals("VECTOR_REAL")) RESULT = TypeConvert.toReal(variable.vector[pos]);
																				else if (variable.tipo.equals("VECTOR_ENTERO") || variable.tipo.equals("VECTOR_CARACTER")) RESULT = TypeConvert.toInteger(variable.vector[pos]);
																				else if (variable.tipo.equals("VECTOR_BOOLEANO")) RESULT = variable.vector[pos];
																				
																		}
																	}temp.clear();:}	


				| NOT  e_boolean:e1				{: RESULT = !(boolean)e1;        :}
				| BOOLEAN_LITERAL:e1			{: RESULT = e1;        :}	
														;
				
				
p_float 		::= LPAREN e_float:e1 RPAREN	{: RESULT = e1;        :};
		

				 
e_boolean		::=	expr_list:e1 EQEQ expr_list:e2{:    
														if (err.checkOperation(e1, e2)==0) {
														RESULT = (e1.equals(e2)); 
													}
													else if (err.checkOperation(e1, e2)==-2) {
														String message = "\nError: "+e1+"=="+e2+"\nNo se puede comparar tipos incompatibles\n";
														mensajeError.add(message);
													}
													else {
														 String message = "\nError: "+e1+"=="+e2+"\nOperandos no validos\n";
														mensajeError.add(message);
													}
												 
													:}
				| expr_list:e1 LTEQ expr_list:e2{:  if (err.checkOperation(e1, e2)==0) {
														RESULT = ((Float.valueOf(String.valueOf(e1))) <= (Float.valueOf(String.valueOf(e2))));
													}
													else if (err.checkOperation(e1, e2)==-2) {
														String message = "\nError: "+e1+"<="+e2+"\nNo se puede comparar tipos incompatibles\n";
														mensajeError.add(message);
													}
													else {
														 String message = "\nError: "+e1+"<="+e2+"\nOperandos no validos\n";
														mensajeError.add(message);
													}
												  :}
												   
				| expr_list:e1 GTEQ expr_list:e2{:  
													if (err.checkOperation(e1, e2)==0) {
														RESULT = ((Float.valueOf(String.valueOf(e1))) >= (Float.valueOf(String.valueOf(e2))));
													}
													else if (err.checkOperation(e1, e2)==-2) {
														String message = "\nError: "+e1+">="+e2+"\nNo se puede comparar tipos incompatibles\n";
														mensajeError.add(message);
													}
													else {
														 String message = "\nError: "+e1+">="+e2+"\nOperandos no validos\n";
														mensajeError.add(message);
													}
   												:}
				| expr_list:e1 NOTEQ expr_list:e2{: if (err.checkOperation(e1, e2)==0) {
														RESULT = ((Float.valueOf(String.valueOf(e1))) != (Float.valueOf(String.valueOf(e2))));
													}
													else if (err.checkOperation(e1, e2)==-2) {
														String message = "\nError: "+e1+"!="+e2+"\nNo se puede comparar tipos incompatibles\n";
														mensajeError.add(message);
													}
													else {
														 String message = "\nError: "+e1+"!="+e2+"\nOperandos no validos\n";
														mensajeError.add(message);
													}
   												:}
				| expr_list:e1 LT expr_list:e2	{: if (err.checkOperation(e1, e2)==0) {
														RESULT = ((Float.valueOf(String.valueOf(e1))) < (Float.valueOf(String.valueOf(e2))));
													}
													else if (err.checkOperation(e1, e2)==-2) {
														String message = "\nError: "+e1+"<"+e2+"\nNo se puede comparar tipos incompatibles\n";
														mensajeError.add(message);
													}
													else {
														String message = "\nError: "+e1+"<"+e2+"\nOperandos no validos\n";
														mensajeError.add(message);
													}
												:}
				| expr_list:e1 GT expr_list:e2	{: if (err.checkOperation(e1, e2)==0) {
														RESULT = ((Float.valueOf(String.valueOf(e1))) > (Float.valueOf(String.valueOf(e2))));
													}
													else if (err.checkOperation(e1, e2)==-2) {
														String message = "\nError: "+e1+">"+e2+"\nNo se puede comparar tipos incompatibles\n";
														mensajeError.add(message);
													}
													else {
														 String message = "\nError: "+e1+">"+e2+"\nOperandos no validos\n";
														mensajeError.add(message);
													}
										        :}

				| e_boolean:e1 OR  e_boolean:e2	{: if (!String.valueOf(e1).equals("null")&&!String.valueOf(e2).equals("null")) RESULT = (((boolean)e1) || ((boolean)e2)); :}
				| e_boolean:e1 AND  e_boolean:e2{: if (!String.valueOf(e1).equals("null")&&!String.valueOf(e2).equals("null"))  RESULT = (((boolean)e1) && ((boolean)e2)); :}	
				
											

				;				
//sustitucion de uminus				      
par_neg 		::= MINUS MINUS
				| par_neg MINUS MINUS
				| PLUS
				| par_neg PLUS
				| MINUS plus MINUS
				| par_neg MINUS plus MINUS
				;
				
impar_neg		::= MINUS
				| MINUS plus
				| par_neg MINUS
				| par_neg MINUS plus					
				;					   
				
plus 			::= plus PLUS
				| PLUS
				;					